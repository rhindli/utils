/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'war'
    id "com.bmuschko.cargo" version "2.3"    
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

ext.earPackageEar = ':sweb_ear_package:ear'
ext.earPackage = ':sweb_ear_package'
ext.ejbProject = ':sweb_ejb'
ext.deployableEar = "${rootProject.buildDir}/libs/soweb.ear"
ext.earBaseName = 'soweb'

apply { 
  from("../gradle_includes/project_settings.gradle")
  from("../gradle_includes/cargo.gradle")
  from("../gradle_includes/war.gradle")
  from("../gradle_includes/ear.gradle")
}

dependencies {
	
	def libsDir = file('../')
	//files from project class path
	implementation files("$libsDir/lib/lib_sweb/google-api-client/google-api-client-1.19.0.jar")
	implementation files("$libsDir/lib/lib_sweb/google-api-client/google-http-client-1.19.0.jar")
		
	implementation files("$libsDir/lib/lib_sweb/google-api-client/google-http-client-gson-1.19.0.jar")
	implementation files("$libsDir/lib/lib/gson-2.2.4.jar")
	
	implementation files("$libsDir/lib/lib_sweb/google-api-client/google-oauth-client-1.19.0.jar")
	implementation files("$libsDir/lib/lib/javax.ws.rs-api-2.0.1.jar")

	providedCompile files("$libsDir/lib/lib_sweb/Visualization1.1.2/gwt-visualization.jar")
	implementation files("$libsDir/lib/lib_sweb/NimbusSDK4.3/nimbus-oauth2-oidc-sdk.jar")
	implementation files("$libsDir/lib/lib_sweb/war/gwt-servlet.jar")	
	implementation files("$libsDir/lib/lib_sweb/war/qrgen-1.1.jar")
	implementation files("$libsDir/lib/lib_sweb/war/zxing-core-1.7.jar")
	implementation files("$libsDir/lib/lib_sweb/war/zxing-j2se-1.7.jar")
	implementation files("$libsDir/lib/lib/commons-httpclient-3.1.jar")
	implementation files("$libsDir/lib/lib/commons-codec-1.9.jar") //dependency of commons-httpclient-3.1.jar
	implementation files("$libsDir/lib/lib/commons-logging-1.2.jar") //dependency of commons-httpclient-3.1.jar
	providedCompile files("$libsDir/lib/lib_sweb/gwt-picker/gwt-picker-0.3-1.jar")
	providedCompile files("$libsDir/lib/lib_sweb/SmartGWT5.0/smartgwt-skins.jar")
	providedCompile files("$libsDir/lib/lib_sweb/SmartGWT5.0/smartgwt.jar")
	implementation files("$libsDir/lib/lib/httpclient-4.5.2.jar")
	implementation files("$libsDir/lib/lib/httpcore-4.4.4.jar") //dependency of httpclient-4.5.2.jar
	
	
	providedCompile files("$libsDir/lib/lib_sweb/GWT2.7.0/gwt-dev.jar")
	providedCompile files("$libsDir/lib/lib_sweb/GWT2.7.0/gwt-user.jar")
	providedCompile files("$libsDir/lib/lib_sweb/GWT2.7.0/validation-api-1.0.0.GA.jar")
	providedCompile files("$libsDir/lib/lib_sweb/GWT2.7.0/validation-api-1.0.0.GA-sources.jar")	
	
	providedCompile files("$libsDir/lib/lib_compile/javax.ejb.jar")
	providedCompile files("$libsDir/lib/lib_compile/javax.servlet.jar")		
		
	implementation project(":core-business")
	providedCompile project(":sweb-themes")	
	implementation project(":sweb_core")
	
	extra_core_projects.each { projectName ->
		implementation project(":$projectName")
	}
	
	providedCompile files("src/main/java") //required for GWT compilation
}

war {
	baseName = 'soweb'
}

task compileGwt(type: JavaExec) {
	group = 'build'
	description = 'Compiles GWT client.'

	def localWorkers = Math.round(Runtime.runtime.availableProcessors() / 2) // '/2' tries to account for virtual vs. physical cores

	//all GWT args: https://gist.github.com/Abdennebi/2828230 
	
	classpath sourceSets.main.runtimeClasspath

	main = 'com.google.gwt.dev.Compiler'
	
	// arguments to pass to the application
	args '-localWorkers', "$localWorkers"
	args '-war', file('src/main/webapp')
	args '-strict'
	args '-style'
	args 'OBF'
	args 'com.bitsoftware.soweb.Soweb'
			
	doLast {
		copy {	
			from file("/src/main/webapp/soweb/sc/skins/Enterprise/images/blank.gif")
		    into file("/src/main/webapp/soweb/sc/skins/standard/images/blank.gif")
	    }	
	}
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}
